import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'eclipse'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.27'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = 'stable'
    mcpMappingVersion = '39'

    username = 'superhelo'

    def args = ["-ea:${project.group}"]
    if (project.use_coremod.toBoolean()) {
        args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    extraRunJvmArguments.addAll(args)

    // Include and use dependencies' Access Transformer files
    useDependencyAccessTransformers = true

    // Add any properties you want to swap out for a dynamic value at build time here
    // Any properties here will be added to a class at build time, the name can be configured below
    // Example:
    // injectedTags.put('VERSION', project.version)
    // injectedTags.put('MOD_ID', project.archives_base_name)
}

// Generate a group.archives_base_name.Tags class
tasks.injectTags.configure {
    // Change Tags class' name here:
    outputClassName.set("${project.group}.${project.archives_base_name}.Tags")
}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        name 'jei'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven {
        name 'tterrag maven'
        url 'https://maven.tterrag.com/'
    }
    maven {
        name 'CoFH Maven'
        url 'https://maven.covers1624.net'
    }
    maven {
        name 'youyihj'
        url 'https://friendlyhj.github.io/maven'
    }
    maven {
        name 'OC Maven'
        url 'https://maven.cil.li/'
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    if (project.use_assetmover.toBoolean()) {
        implementation 'com.cleanroommc:assetmover:2.5'
    }
    if (project.use_mixins.toBoolean()) {
        implementation 'zone.rong:mixinbooter:7.1'
    }

    implementation rfg.deobf("vazkii.patchouli:Patchouli:1.0-21.5")
    implementation rfg.deobf("cofh:RedstoneFlux:1.12-2.0.0.1:universal")
    implementation rfg.deobf("mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.28-17")

    implementation files('libs/CraftTweaker2-MC1120-Mod-JEI-1.12-4.1.20.670-deobf.jar')

    implementation rfg.deobf("curse.maven:zenutil-401178:4796427-sources-4796428")
    implementation rfg.deobf("zone.rong:mixinbooter:4.2")
    implementation rfg.deobf("com.blamejared:MTLib:3.0.5.15")
    implementation rfg.deobf("mezz.jei:jei_1.12.2:4.16.1.302")
    implementation rfg.deobf("curse.maven:Baubles-227083:2518667")
    implementation rfg.deobf("vazkii.botania:Botania:r1.10-363.148")
    implementation rfg.deobf("curse.maven:modtweaker-220954:3488553")
    implementation rfg.deobf("curse.maven:hammerlib-247401:3611193")
    implementation rfg.deobf("curse.maven:thaumcraft-223628:2629023")
    implementation rfg.deobf("curse.maven:naturesaura-306626:2882138")
    implementation rfg.deobf("curse.maven:TinkersConstruct-74072:2902483")
    implementation rfg.deobf("curse.maven:Mantle-74924:2713386")
    implementation rfg.deobf("curse.maven:ftb-ultimine-386134:3078750")
    implementation rfg.deobf("curse.maven:astralsorcery-241721:3044416")
    implementation rfg.deobf("curse.maven:thaumicadditions-232564:3663195")
    implementation rfg.deobf("com.teamacronymcoders:ContentTweaker:1.12.2-4.9.1")
    implementation rfg.deobf("com.teamacronymcoders.base:base:1.12.2-3.13.0-SNAPSHOT.+")
    implementation(rfg.deobf("CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.682")) {
        exclude module: "gson"
    }

    implementation rfg.deobf("curse.maven:BrandonsCore-231382:3408276")
    implementation(rfg.deobf("curse.maven:Draconic-Evolution-223565:3431261")) {
        exclude module: "jei_1.12.2"
        exclude module: "RedstoneFlux"
    }
    implementation rfg.deobf("curse.maven:BrandonsCore-231382:3408276")
    implementation rfg.deobf("curse.maven:CodeChickenLib-242818:2779848")

    if (project.use_mixins.toBoolean()) {
        // Change your mixin refmap name here:
        String mixin = modUtils.enableMixins('org.spongepowered:mixin:0.8.3', "mixins.${project.archives_base_name}.refmap.json")
        api(mixin) {
            transitive = false
        }
        annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
        annotationProcessor 'com.google.guava:guava:24.1.1-jre'
        annotationProcessor 'com.google.code.gson:gson:2.8.6'
        annotationProcessor(mixin) {
            transitive = false
        }
    }

}

// Adds Access Transformer files to tasks
if (project.use_access_transformer.toBoolean()) {
    for (File at : sourceSets.getByName("main").resources.files) {
        if (at.name.toLowerCase().endsWith("_at.cfg")) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
        }
    }
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // Replace version and mcversion
        fcd.expand(
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }

    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1'
        // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
            }
        }
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = project.archives_base_name + '_at.cfg'
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } })
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}
